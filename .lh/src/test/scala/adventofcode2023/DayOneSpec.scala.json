{
    "sourceFile": "src/test/scala/adventofcode2023/DayOneSpec.scala",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1701441987211,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1701442127930,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n import fs2.Stream\n import cats.effect.IO\n import adventofcode2023.DayOne\n \n-object DayOneSpec extends AsyncFunSuite with AsyncIOSpec with Matchers {\n+class DayOneSpec extends AsyncFunSuite with AsyncIOSpec with Matchers {\n   test(\n     \"DayOne.calibrationSum takes a string containing at least two digits and returns the sum of them\"\n   ) {\n     val input = Stream[IO, String](\"a1b2\", \"a3b6\")\n"
                },
                {
                    "date": 1701442273707,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,8 +7,14 @@\n import cats.effect.IO\n import adventofcode2023.DayOne\n \n class DayOneSpec extends AsyncFunSuite with AsyncIOSpec with Matchers {\n+\n+  test(\"DayOne.getNumbers should take a String and return all the numbers within it\") {\n+    val input = \"a1b2\"\n+    DayOne.getNumbers(input) shouldBe List(1,2)\n+  }\n+\n   test(\n     \"DayOne.calibrationSum takes a string containing at least two digits and returns the sum of them\"\n   ) {\n     val input = Stream[IO, String](\"a1b2\", \"a3b6\")\n"
                },
                {
                    "date": 1701442550058,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,11 @@\n   test(\n     \"DayOne.getNumbers should take a String and return all the numbers within it\"\n   ) {\n     val input = \"a1b2\"\n+    val input2 = \"nf3rnfjr3nfiunruiev5\"\n     DayOne.getNumbers(input) shouldBe List(1, 2)\n+    DayOne.getNumbers(input) shouldBe List(3, 3, 5)\n   }\n \n   test(\n     \"DayOne.calibrationSum takes a string containing at least two digits and returns the sum of them\"\n"
                },
                {
                    "date": 1701442559804,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n   ) {\n     val input = \"a1b2\"\n     val input2 = \"nf3rnfjr3nfiunruiev5\"\n     DayOne.getNumbers(input) shouldBe List(1, 2)\n-    DayOne.getNumbers(input) shouldBe List(3, 3, 5)\n+    DayOne.getNumbers(input2) shouldBe List(3, 3, 5)\n   }\n \n   test(\n     \"DayOne.calibrationSum takes a string containing at least two digits and returns the sum of them\"\n"
                }
            ],
            "date": 1701441987211,
            "name": "Commit-0",
            "content": "package adventofcode2023\n\nimport org.scalatest.funsuite.AsyncFunSuite\nimport cats.effect.testing.scalatest.AsyncIOSpec\nimport org.scalatest.matchers.should.Matchers\nimport fs2.Stream\nimport cats.effect.IO\nimport adventofcode2023.DayOne\n\nobject DayOneSpec extends AsyncFunSuite with AsyncIOSpec with Matchers {\n  test(\n    \"DayOne.calibrationSum takes a string containing at least two digits and returns the sum of them\"\n  ) {\n    val input = Stream[IO, String](\"a1b2\", \"a3b6\")\n\n    DayOne.calibrationSum(input).asserting(_ shouldBe 12)\n  }\n}\n"
        }
    ]
}